#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
from   mpl_toolkits.mplot3d import Axes3D
import os
import csv
import glob
from   datetime import datetime
import json
import copy
#from scipy.interpolate import interp1d


from matplotlib import gridspec

#from motionmodel_mod import *

def colors_gen(num):
    col = [(0.0,1.0,0.0),
           (0.0,0.0,1.0),
           (1.0,0.5,0.0),
           (0.5,0.0,0.5),
           (0.3,1.0,1.0),
           (0.9,0.1,0.9),
           (0.8,0.8,0.3),
           (1.0,1.0,0.0)
          ]

    if num<=len(col):
        col = col[:num]
    else:
        for i in range(num-len(col)):
            col.append((np.random.rand(1)[0],np.random.rand(1)[0],np.random.rand(1)[0]))
    return col

def read_csv_file(fn, skipheader):
    '''
    Read a csv file (typically generated by an Orocos reporter) and
    stores its contents in a numpy array.
    For demonstrations, the first column (in the file and in the matrix) corresponds to time, the
    other columns to the different degrees of freedom.
    NOTE skipheader corresponds to the number of rows that belong to the header
    '''
    data = []
    header = []
    i=0
    with open(fn,'r') as csvfile:
        freader = csv.reader(csvfile,delimiter=' ',skipinitialspace=True)
        for row in freader:
            i=i+1
            if i > skipheader:
               #print '=>',', '.join(row)
               if len(row)>1:
                if row[-1]== '':
                  data.append( [float(e) for e in row[:-1] ])
                else:
                  data.append( [float(e) for e in row])
            else:
              header.append(row)
    return np.array( data ), header


def plot_data(ax,data, header,sel_headers,**kwargs):
    col = colors_gen(len(sel_headers))
    i = 0
    for hd in sel_headers:
        # if kwargs.has_key('color'):
        #     ax.plot(data[:,0],data[:,header[0].index(hd)],**kwargs)
        # else:
        kwargs['color'] = col[i]
        ax.plot(data[:,0],data[:,header[0].index(hd)],**kwargs)
        i = i+1



dir='/home/gborghesan/ws_noetic/ws_active/src/cart_test/reports/'
file='report.dat'
fn = dir + file
print(fn)

data, header = read_csv_file(fn, 1)



sel_joint_space = ['etaslcore.jointvel.0','etaslcore.jointvel.1','etaslcore.jointvel.2','etaslcore.jointvel.3','etaslcore.jointvel.4','etaslcore.jointvel.5']


sel_headers_pos = ['etaslcore.tf_pose.2',]
sel_headers_rot = ['etaslcore.tf_pose.3', 'etaslcore.tf_pose.4', 'etaslcore.tf_pose.5']
sel_headers_force = ['etaslcore.wrench_tf.0', 'etaslcore.wrench_tf.1', 'etaslcore.wrench_tf.2']
sel_headers_moments = ['etaslcore.wrench_tf.3', 'etaslcore.wrench_tf.4', 'etaslcore.wrench_tf.5']

sel_headers_pathcoord = ['etaslcore.path_coordinate.0']



fig3 = plt.figure(3,figsize=[12.8,9.6])
ax1_3 = fig3.add_subplot(211)
ax2_3 = fig3.add_subplot(212,sharex=ax1_3)
plot_data(ax1_3,data, header,sel_headers_pos)
ax1_3.legend(['x','y','z'])
plot_data(ax2_3,data, header,sel_headers_rot)
ax2_3.legend(['R','P','Y'])
# fig = plt.figure(1,figsize=[12.8,9.6])
#
# ax1 = fig.add_subplot(511)
# ax2 = fig.add_subplot(512,sharex=ax1)
# ax3 = fig.add_subplot(513,sharex=ax1)
# ax4 = fig.add_subplot(514,sharex=ax1)
# ax5 = fig.add_subplot(515,sharex=ax1)

# plot_data(ax1,data, header,sel_headers_pos[0:3],**{'linestyle':'-'})
# plot_data(ax2,data, header,sel_headers_rot[0:3],**{'linestyle':'-'})
# plot_data(ax3,data, header,sel_headers_force[0:3],**{'linestyle':'-'})
# plot_data(ax4,data, header,sel_headers_moments[0:3],**{'linestyle':'-'})
# plot_data(ax5,data, header,sel_headers_pathcoord)

# fig2 = plt.figure(2,figsize=[12.8,9.6])
# #
# ax1_2 = fig2.add_subplot(311)
# ax2_2 = fig2.add_subplot(312,sharex=ax1_2)
# ax3_2 = fig2.add_subplot(313,sharex=ax1_2)
#
# plot_data(ax1_2,data, header,sel_headers_pathcoord)
# ax2_2.plot(data[:,0],s_vel)
# plot_data(ax2_2,data, header,sel_headers_pathcoord_vel)
# ax2_2.set_ylim([0, 2])
# plot_data(ax3_2,data, header,sel_headers_latent_variables)
# # plot_data(ax1_2,data, header,sel_headers_pathcoord_gen)
#
# fig4 = plt.figure(4,figsize=[12.8,9.6])
# #
# ax1_4 = fig4.add_subplot(211)
# ax2_4 = fig4.add_subplot(212,sharex=ax1_4)
#
# plot_data(ax1_4,data, header,sel_headers_force_wights)
# plot_data(ax2_4,data, header,sel_headers_force_wights_derivative)
#
#
# fig5 = plt.figure(5,figsize=[12.8,9.6])
# #
# ax1_5 = fig5.add_subplot(411)
# ax2_5 = fig5.add_subplot(412,sharex=ax1_5)
# ax3_5 = fig5.add_subplot(413,sharex=ax1_5)
# ax4_5 = fig5.add_subplot(414,sharex=ax1_5)
#
#
# plot_data(ax1_5,data, header,sel_headers_force[0:3],**{'linestyle':'-'})
# plot_data(ax1_5,data, header,sel_headers_force[3:6],**{'linestyle':'--'})
# plot_data(ax2_5,data, header,sel_headers_moments[0:3],**{'linestyle':'-'})
# plot_data(ax2_5,data, header,sel_headers_moments[3:6],**{'linestyle':'--'})
# plot_data(ax3_5,data, header,sel_headers_force_wights)
# plot_data(ax4_5,data, header,sel_headers_force_wights_derivative)
#
#
# fig6 = plt.figure(6,figsize=[12.8,9.6])
# ax1_6 = fig6.add_subplot(211)
# ax2_6 = fig6.add_subplot(212,sharex=ax1_6)
#
# plot_data(ax1_6,data, header,sel_headers_force_raw[0:3],**{'linestyle':'-'})
# plot_data(ax2_6,data, header,sel_headers_moments_raw[0:3],**{'linestyle':'-'})
#



fig = plt.figure()
ax3d = fig.gca(projection='3d')
ax3d.plot(data[:,header[0].index(sel_headers_pos[0])], data[:,header[0].index(sel_headers_pos[1])], data[:,header[0].index(sel_headers_pos[2])], 'b-', label='tf')
ax3d.set_xlabel('x [m]')
ax3d.set_ylabel('y [m]')
ax3d.set_zlabel('z [m]')
#
#
plt.show(block=False)
